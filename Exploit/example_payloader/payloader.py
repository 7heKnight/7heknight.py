from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import *
from Crypto.Cipher import AES
from hashlib import md5
from base64 import *
import sys
import re
import os

class AESCipher:
    def __init__(self, key):
        self.key = md5(key.encode('utf8')).digest()

    def decrypt(self, data):
        raw = b64decode(data)
        self.cipher = AES.new(self.key, AES.MODE_CBC, raw[:AES.block_size])
        return unpad(self.cipher.decrypt(raw[AES.block_size:]), AES.block_size)

def argv_parser():
    if len(sys.argv) == 1:
        sys.exit('[-] Need arguments')
    if '-p' in sys.argv:
        key = sys.argv[sys.argv.index('-p')+1]
    else:
        sys.exit('[-] Required key')
    if '-f' in sys.argv:
        file_name = sys.argv[sys.argv.index('-f')+1]
    else:
        sys.exit('[-] Required file_name')
    if not os.path.isfile(file_name):
        sys.exit('[-] File not found!')
    data = open(file_name, 'rb').read()
    return data, str(key)

if __name__=='__main__':
    data, aes_key = argv_parser()
    try:
        cipher = AESCipher(aes_key).decrypt(data)
    except:
        sys.exit('[-] Wrong Key! File not decrypted')
    cipher = cipher.decode('UTF-8')
    # print(cipher)
    eval(cipher) # Execute the payload here after decrypted
    # exec(cipher) # Similar syntax with the upper
# Usage: python payloader.py -f payload.txt -p 123
# The encrypted string in the file is: print('YOUR COMPUTER INFECTED')
